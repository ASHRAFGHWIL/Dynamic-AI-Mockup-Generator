import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

/**
 * Generates a base image scene using a text prompt.
 * @param prompt The text prompt to generate the image from.
 * @param aspectRatio The desired aspect ratio for the generated image.
 * @returns A base64 encoded string of the generated JPEG image.
 */
export const generateBaseImage = async (prompt: string, aspectRatio: string): Promise<string> => {
  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: aspectRatio,
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      return response.generatedImages[0].image.imageBytes;
    }
    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error generating base image:", error);
    throw new Error("Failed to generate the base scene. Please try again.");
  }
};

/**
 * Edits a base image by inserting a design image based on a text prompt.
 * @param baseImageB64 The base64 encoded base image.
 * @param designImageB64 The base64 encoded design image to insert.
 * @param designMimeType The MIME type of the design image.
 * @param prompt The text prompt guiding the edit.
 * @returns A base64 encoded string of the final edited PNG image.
 */
export const editImage = async (
  baseImageB64: string,
  designImageB64: string,
  designMimeType: string,
  prompt: string
): Promise<string> => {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [
          {
            inlineData: {
              data: baseImageB64,
              mimeType: 'image/jpeg',
            },
          },
          {
            inlineData: {
              data: designImageB64,
              mimeType: designMimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        return part.inlineData.data;
      }
    }
    
    // Check for text part which might contain an error or refusal message
    const textPart = response.candidates[0].content.parts.find(p => p.text);
    if(textPart && textPart.text) {
        throw new Error(`Image editing failed: ${textPart.text}`);
    }

    throw new Error("No edited image was returned by the API.");
  } catch (error) {
    console.error("Error editing image:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to composite your design: ${error.message}`);
    }
    throw new Error("An unknown error occurred during image editing.");
  }
};